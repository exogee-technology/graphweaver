import { BaseDataEntity } from '@exogee/graphweaver';

export enum UserProfileType {
	SERVICE = 'service',
	USER = 'user',
}

export type UserProfileData<R> = {
	id?: string;
	username?: string;
	displayName?: string;
	name?: {
		familyName?: string;
		givenName?: string;
		middleName?: string;
	};
	email?: string;
	roles?: R[];
	type?: UserProfileType;
};

export class UserProfile<R> implements Omit<BaseDataEntity, 'id'> {
	id?: string; // A unique identifier for the user, as generated by the service provider.
	username?: string; // a unique string used for password authentication.
	displayName?: string; //The name of this user, suitable for display.
	name?: {
		familyName?: string; // The family name of this user, or "last name" in most Western languages.
		givenName?: string; // The given name of this user, or "first name" in most Western languages.
		middleName?: string; // The middle name of this user.
	};
	email?: string; // This users email address
	roles?: R[]; // The roles assigned to this user.
	type?: UserProfileType = UserProfileType.USER; // The type of user this is.

	constructor(userProfileData: UserProfileData<R>) {
		this.id = userProfileData.id;
		this.username = userProfileData.username;
		this.displayName = userProfileData.displayName;
		this.name = userProfileData.name;
		this.email = userProfileData.email;
		this.roles = userProfileData.roles;
		this.type = userProfileData.type;
	}

	isReference(fieldName: string, dataField: any) {
		return false;
	}
	isCollection(fieldName: string, dataField: any) {
		return false;
	}
}
