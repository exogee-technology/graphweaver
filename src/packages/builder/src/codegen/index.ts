import fs from 'fs';
import path from 'path';
import { codegen } from '@graphql-codegen/core';
import nearOperationFilePreset from '@graphql-codegen/near-operation-file-preset';
import * as typescriptOperations from '@graphql-codegen/typescript-operations';
import * as typescriptReactApollo from '@graphql-codegen/typescript-react-apollo';
import { GraphQLSchema, buildSchema, printSchema, parse, DocumentNode } from 'graphql';
import * as typescript from '@graphql-codegen/typescript';
import { loadDocuments } from '@graphql-tools/load';
import { CodeFileLoader } from '@graphql-tools/code-file-loader';
import { Source } from '@graphql-tools/utils';

type CodegenOptions = {
	typesOutputPath?: string | string[];
};

const content = `/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/`;

const generateCombinedTypeFiles = async (
	config: Record<string, any>,
	schema: DocumentNode,
	documents: Source[]
) => {
	const typesFileContent = await codegen({
		schema,
		documents,
		filename: 'src/types.generated.ts',
		config,
		plugins: [{ typescriptPlugin: {} }],
		pluginMap: {
			typescriptPlugin: typescript,
		},
	});
	fs.writeFileSync('src/types.generated.ts', content.concat('\n', typesFileContent));
	fs.writeFileSync('src/frontend/types.generated.ts', content.concat('\n', typesFileContent));
};

const generateIndividualTypeFiles = async (
	config: Record<string, any>,
	schema: DocumentNode,
	documents: Source[]
) => {
	const argsList = await nearOperationFilePreset.buildGeneratesSection({
		presetConfig: {
			extension: '.generated.ts',
			baseTypesPath: 'types.generated.ts',
		},
		plugins: [{ typescriptOperationsPlugin: {} }, { typescriptReactApolloPlugin: {} }],
		schema,
		documents,
		config,
		pluginMap: {
			typescriptOperationsPlugin: typescriptOperations,
			typescriptReactApolloPlugin: typescriptReactApollo,
		},
		baseOutputDir: '.',
	});

	const tasks = argsList.map(async (args) => {
		const output = await codegen(args);
		fs.promises.writeFile(args.filename, content.concat('\n', output));
	});

	await Promise.all(tasks);
};

const generateFiles = async (schemaAsString: string) => {
	const gqlSchema: GraphQLSchema = buildSchema(schemaAsString);
	const schema = parse(printSchema(gqlSchema));

	const config = {
		skipDocumentsValidation: {
			skipDuplicateValidation: true, // A flag to disable the validation for duplicate query and mutation names we don't need this as we are using near-operation-file
		},
		sort: true,
	};

	let documents: Source[] = [];
	try {
		documents = await loadDocuments('./src/**/!(*.generated).{ts,tsx}', {
			loaders: [new CodeFileLoader()],
		});
	} catch (e: any) {
		if (e.message.includes('Unable to find any GraphQL type definitions'))
			// typically none of the matching files are relevant but that's okay
			console.info('No components found with embedded GQL queries');
		else console.warn(e);
	}

	await generateCombinedTypeFiles(config, schema, documents);
	await generateIndividualTypeFiles(config, schema, documents);
};

export const codeGenerator = async (schema: string, options?: CodegenOptions) => {
	try {
		await generateFiles(schema);
	} catch (err: any) {
		const defaultStateMessage = `Unable to find any GraphQL type definitions for the following pointers:`;
		if (err.message && err.message.includes(defaultStateMessage)) {
			// do nothing for now and silently fail
		} else {
			console.log(err.message + `\n in ${err.source?.name}`);
		}
	}
};
