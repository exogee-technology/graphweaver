/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  clientGeneratedPrimaryKeys?: Maybe<Scalars['Boolean']['output']>;
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendDisplayName?: Maybe<Scalars['String']['output']>;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  defaultSort?: Maybe<Scalars['JSON']['output']>;
  excludeFromTracing: Scalars['Boolean']['output'];
  fieldForDetailPanelNavigationId: Scalars['String']['output'];
  fields: Array<AdminUiFieldMetadata>;
  hideInSideBar: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  primaryKeyField: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
  supportedAggregationTypes: Array<AggregationType>;
  supportsPseudoCursorPagination: Scalars['Boolean']['output'];
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  detailPanelInputComponent?: Maybe<DetailPanelInputComponent>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  hideInDetailForm?: Maybe<Scalars['Boolean']['output']>;
  hideInFilterBar?: Maybe<Scalars['Boolean']['output']>;
  hideInTable?: Maybe<Scalars['Boolean']['output']>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  DropDownText = 'DROP_DOWN_TEXT',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type AggregationResult = {
  __typename?: 'AggregationResult';
  count: Scalars['Int']['output'];
};

export enum AggregationType {
  Count = 'COUNT'
}

export type CreateThumbnailInput = {
  height: Scalars['Float']['input'];
  submissionId: Scalars['ID']['input'];
  width: Scalars['Float']['input'];
};

export type DeleteOneFilterInput = {
  id: Scalars['ID']['input'];
};

export type DetailPanelInputComponent = {
  __typename?: 'DetailPanelInputComponent';
  name: DetailPanelInputComponentOption;
  options?: Maybe<Scalars['JSON']['output']>;
};

export enum DetailPanelInputComponentOption {
  Markdown = 'MARKDOWN',
  RichText = 'RICH_TEXT',
  Text = 'TEXT'
}

export type GraphweaverMedia = {
  __typename?: 'GraphweaverMedia';
  filename: Scalars['String']['output'];
  type: MediaType;
  url: Scalars['String']['output'];
};

/** Data needed to create or update GraphweaverMedias. If an ID is passed, this is an update, otherwise it's an insert. */
export type GraphweaverMediaCreateOrUpdateInput = {
  filename?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<MediaType>;
};

/** Data needed to create GraphweaverMedias. */
export type GraphweaverMediaInsertInput = {
  filename: Scalars['String']['input'];
  type: MediaType;
};

/** Data needed to update GraphweaverMedias. An ID must be passed. */
export type GraphweaverMediaUpdateInput = {
  filename?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<MediaType>;
};

export type GraphweaverMediasListFilter = {
  _and?: InputMaybe<Array<InputMaybe<GraphweaverMediasListFilter>>>;
  _not?: InputMaybe<GraphweaverMediasListFilter>;
  _or?: InputMaybe<Array<InputMaybe<GraphweaverMediasListFilter>>>;
  filename?: InputMaybe<Scalars['String']['input']>;
  filename_gt?: InputMaybe<Scalars['String']['input']>;
  filename_gte?: InputMaybe<Scalars['String']['input']>;
  filename_ilike?: InputMaybe<Scalars['String']['input']>;
  filename_in?: InputMaybe<Array<Scalars['String']['input']>>;
  filename_like?: InputMaybe<Scalars['String']['input']>;
  filename_lt?: InputMaybe<Scalars['String']['input']>;
  filename_lte?: InputMaybe<Scalars['String']['input']>;
  filename_ne?: InputMaybe<Scalars['String']['input']>;
  filename_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  filename_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  filename_null?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<MediaType>;
  type_in?: InputMaybe<Array<MediaType>>;
  type_nin?: InputMaybe<Array<MediaType>>;
  url?: InputMaybe<Scalars['String']['input']>;
  url_gt?: InputMaybe<Scalars['String']['input']>;
  url_gte?: InputMaybe<Scalars['String']['input']>;
  url_ilike?: InputMaybe<Scalars['String']['input']>;
  url_in?: InputMaybe<Array<Scalars['String']['input']>>;
  url_like?: InputMaybe<Scalars['String']['input']>;
  url_lt?: InputMaybe<Scalars['String']['input']>;
  url_lte?: InputMaybe<Scalars['String']['input']>;
  url_ne?: InputMaybe<Scalars['String']['input']>;
  url_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  url_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  url_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageNote = {
  __typename?: 'ImageNote';
  id: Scalars['ID']['output'];
  note: Scalars['String']['output'];
  submission: Submission;
  submission_aggregate?: Maybe<AggregationResult>;
};


export type ImageNoteSubmissionArgs = {
  filter?: InputMaybe<SubmissionsListFilter>;
};


export type ImageNoteSubmission_AggregateArgs = {
  filter?: InputMaybe<SubmissionsListFilter>;
};

/** Data needed to create or update ImageNotes. If an ID is passed, this is an update, otherwise it's an insert. */
export type ImageNoteCreateOrUpdateInput = {
  id: Scalars['ID']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  submission?: InputMaybe<SubmissionCreateOrUpdateInput>;
};

/** Data needed to create ImageNotes. */
export type ImageNoteInsertInput = {
  id: Scalars['ID']['input'];
  note: Scalars['String']['input'];
  submission?: InputMaybe<SubmissionCreateOrUpdateInput>;
};

/** Data needed to update ImageNotes. An ID must be passed. */
export type ImageNoteUpdateInput = {
  id: Scalars['ID']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  submission?: InputMaybe<SubmissionCreateOrUpdateInput>;
};

export type ImageNotesListFilter = {
  _and?: InputMaybe<Array<InputMaybe<ImageNotesListFilter>>>;
  _not?: InputMaybe<ImageNotesListFilter>;
  _or?: InputMaybe<Array<InputMaybe<ImageNotesListFilter>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  note_gt?: InputMaybe<Scalars['String']['input']>;
  note_gte?: InputMaybe<Scalars['String']['input']>;
  note_ilike?: InputMaybe<Scalars['String']['input']>;
  note_in?: InputMaybe<Array<Scalars['String']['input']>>;
  note_like?: InputMaybe<Scalars['String']['input']>;
  note_lt?: InputMaybe<Scalars['String']['input']>;
  note_lte?: InputMaybe<Scalars['String']['input']>;
  note_ne?: InputMaybe<Scalars['String']['input']>;
  note_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  note_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  note_null?: InputMaybe<Scalars['Boolean']['input']>;
  submission?: InputMaybe<SubmissionsListFilter>;
};

export type ImageNotesOrderByInput = {
  id?: InputMaybe<Sort>;
  note?: InputMaybe<Sort>;
};

/** Pagination options for ImageNotes. */
export type ImageNotesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ImageNotesOrderByInput>;
};

export enum MediaType {
  Image = 'IMAGE',
  Other = 'OTHER'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a single ImageNote. */
  createImageNote?: Maybe<ImageNote>;
  /** Create many ImageNotes. */
  createImageNotes?: Maybe<Array<Maybe<ImageNote>>>;
  /** Create or update many ImageNotes. */
  createOrUpdateImageNotes?: Maybe<Array<Maybe<ImageNote>>>;
  /** Create or update many Submissions. */
  createOrUpdateSubmissions?: Maybe<Array<Maybe<Submission>>>;
  /** Create a single Submission. */
  createSubmission?: Maybe<Submission>;
  /** Create many Submissions. */
  createSubmissions?: Maybe<Array<Maybe<Submission>>>;
  createThumbnail?: Maybe<Submission>;
  /** Delete a single ImageNote. */
  deleteImageNote?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many ImageNotes with a filter. */
  deleteImageNotes?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Submission. */
  deleteSubmission?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Submissions with a filter. */
  deleteSubmissions?: Maybe<Scalars['Boolean']['output']>;
  getDeleteUrl?: Maybe<Scalars['String']['output']>;
  getUploadUrl?: Maybe<Scalars['JSON']['output']>;
  /** Update a single ImageNote. */
  updateImageNote?: Maybe<ImageNote>;
  /** Update many ImageNotes. */
  updateImageNotes?: Maybe<Array<Maybe<ImageNote>>>;
  /** Update a single Submission. */
  updateSubmission?: Maybe<Submission>;
  /** Update many Submissions. */
  updateSubmissions?: Maybe<Array<Maybe<Submission>>>;
};


export type MutationCreateImageNoteArgs = {
  input: ImageNoteInsertInput;
};


export type MutationCreateImageNotesArgs = {
  input: Array<ImageNoteInsertInput>;
};


export type MutationCreateOrUpdateImageNotesArgs = {
  input: Array<ImageNoteCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateSubmissionsArgs = {
  input: Array<SubmissionCreateOrUpdateInput>;
};


export type MutationCreateSubmissionArgs = {
  input: SubmissionInsertInput;
};


export type MutationCreateSubmissionsArgs = {
  input: Array<SubmissionInsertInput>;
};


export type MutationCreateThumbnailArgs = {
  input?: InputMaybe<CreateThumbnailInput>;
};


export type MutationDeleteImageNoteArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteImageNotesArgs = {
  filter: ImageNotesListFilter;
};


export type MutationDeleteSubmissionArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteSubmissionsArgs = {
  filter: SubmissionsListFilter;
};


export type MutationGetDeleteUrlArgs = {
  key?: InputMaybe<Scalars['String']['input']>;
};


export type MutationGetUploadUrlArgs = {
  key?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateImageNoteArgs = {
  input: ImageNoteUpdateInput;
};


export type MutationUpdateImageNotesArgs = {
  input: Array<ImageNoteUpdateInput>;
};


export type MutationUpdateSubmissionArgs = {
  input: SubmissionUpdateInput;
};


export type MutationUpdateSubmissionsArgs = {
  input: Array<SubmissionUpdateInput>;
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  getDownloadUrl?: Maybe<Scalars['String']['output']>;
  /** Get a single ImageNote. */
  imageNote?: Maybe<ImageNote>;
  /** Get multiple ImageNotes. */
  imageNotes?: Maybe<Array<Maybe<ImageNote>>>;
  /** Get aggregated data for ImageNotes. */
  imageNotes_aggregate?: Maybe<AggregationResult>;
  /** Get a single Submission. */
  submission?: Maybe<Submission>;
  submissionByFilename?: Maybe<Submission>;
  /** Get multiple Submissions. */
  submissions?: Maybe<Array<Maybe<Submission>>>;
  /** Get aggregated data for Submissions. */
  submissions_aggregate?: Maybe<AggregationResult>;
};


export type QueryGetDownloadUrlArgs = {
  key?: InputMaybe<Scalars['String']['input']>;
};


export type QueryImageNoteArgs = {
  id: Scalars['ID']['input'];
};


export type QueryImageNotesArgs = {
  filter?: InputMaybe<ImageNotesListFilter>;
  pagination?: InputMaybe<ImageNotesPaginationInput>;
};


export type QueryImageNotes_AggregateArgs = {
  filter?: InputMaybe<ImageNotesListFilter>;
};


export type QuerySubmissionArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySubmissionByFilenameArgs = {
  filename?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySubmissionsArgs = {
  filter?: InputMaybe<SubmissionsListFilter>;
  pagination?: InputMaybe<SubmissionsPaginationInput>;
};


export type QuerySubmissions_AggregateArgs = {
  filter?: InputMaybe<SubmissionsListFilter>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Submission = {
  __typename?: 'Submission';
  id: Scalars['ID']['output'];
  image?: Maybe<GraphweaverMedia>;
  imageNote?: Maybe<ImageNote>;
  imageNote_aggregate?: Maybe<AggregationResult>;
};


export type SubmissionImageNoteArgs = {
  filter?: InputMaybe<ImageNotesListFilter>;
};


export type SubmissionImageNote_AggregateArgs = {
  filter?: InputMaybe<ImageNotesListFilter>;
};

/** Data needed to create or update Submissions. If an ID is passed, this is an update, otherwise it's an insert. */
export type SubmissionCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<GraphweaverMediaCreateOrUpdateInput>;
  imageNote?: InputMaybe<ImageNoteCreateOrUpdateInput>;
};

/** Data needed to create Submissions. */
export type SubmissionInsertInput = {
  image?: InputMaybe<GraphweaverMediaCreateOrUpdateInput>;
  imageNote?: InputMaybe<ImageNoteCreateOrUpdateInput>;
};

/** Data needed to update Submissions. An ID must be passed. */
export type SubmissionUpdateInput = {
  id: Scalars['ID']['input'];
  image?: InputMaybe<GraphweaverMediaCreateOrUpdateInput>;
  imageNote?: InputMaybe<ImageNoteCreateOrUpdateInput>;
};

export type SubmissionsListFilter = {
  _and?: InputMaybe<Array<InputMaybe<SubmissionsListFilter>>>;
  _not?: InputMaybe<SubmissionsListFilter>;
  _or?: InputMaybe<Array<InputMaybe<SubmissionsListFilter>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<GraphweaverMediasListFilter>;
  imageNote?: InputMaybe<ImageNotesListFilter>;
};

export type SubmissionsOrderByInput = {
  id?: InputMaybe<Sort>;
};

/** Pagination options for Submissions. */
export type SubmissionsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SubmissionsOrderByInput>;
};
