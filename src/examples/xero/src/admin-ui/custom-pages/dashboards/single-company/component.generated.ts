/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
import * as Types from '../../../../types.generated';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type SingleCompanyProfitAndLossRowsQueryVariables = Types.Exact<{
  tenantId: Types.Scalars['ID']['input'];
}>;


export type SingleCompanyProfitAndLossRowsQuery = { __typename?: 'Query', profitAndLossRows?: Array<{ __typename?: 'ProfitAndLossRow', amount: number, date: any, description: string, account?: { __typename?: 'Account', name?: string | null, type?: Types.AccountType | null } | null } | null> | null };


export const SingleCompanyProfitAndLossRowsDocument = gql`
    query singleCompanyProfitAndLossRows($tenantId: ID!) {
  profitAndLossRows(filter: {tenantId: $tenantId}) {
    amount
    date
    description
    account {
      name
      type
    }
  }
}
    `;

/**
 * __useSingleCompanyProfitAndLossRowsQuery__
 *
 * To run a query within a React component, call `useSingleCompanyProfitAndLossRowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSingleCompanyProfitAndLossRowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSingleCompanyProfitAndLossRowsQuery({
 *   variables: {
 *      tenantId: // value for 'tenantId'
 *   },
 * });
 */
export function useSingleCompanyProfitAndLossRowsQuery(baseOptions: Apollo.QueryHookOptions<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables> & ({ variables: SingleCompanyProfitAndLossRowsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>(SingleCompanyProfitAndLossRowsDocument, options);
      }
export function useSingleCompanyProfitAndLossRowsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>(SingleCompanyProfitAndLossRowsDocument, options);
        }
export function useSingleCompanyProfitAndLossRowsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>(SingleCompanyProfitAndLossRowsDocument, options);
        }
export type SingleCompanyProfitAndLossRowsQueryHookResult = ReturnType<typeof useSingleCompanyProfitAndLossRowsQuery>;
export type SingleCompanyProfitAndLossRowsLazyQueryHookResult = ReturnType<typeof useSingleCompanyProfitAndLossRowsLazyQuery>;
export type SingleCompanyProfitAndLossRowsSuspenseQueryHookResult = ReturnType<typeof useSingleCompanyProfitAndLossRowsSuspenseQuery>;
export type SingleCompanyProfitAndLossRowsQueryResult = Apollo.QueryResult<SingleCompanyProfitAndLossRowsQuery, SingleCompanyProfitAndLossRowsQueryVariables>;