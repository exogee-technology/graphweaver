/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
import * as Types from '../../../../types.generated';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type AllCompaniesProfitAndLossRowsQueryVariables = Types.Exact<{
  description: Types.Scalars['String']['input'];
}>;


export type AllCompaniesProfitAndLossRowsQuery = { __typename?: 'Query', profitAndLossRows?: Array<{ __typename?: 'ProfitAndLossRow', amount: number, date: any, tenant: { __typename?: 'Tenant', id: string, tenantName: string } } | null> | null };


export const AllCompaniesProfitAndLossRowsDocument = gql`
    query allCompaniesProfitAndLossRows($description: String!) {
  profitAndLossRows(filter: {description: $description}) {
    amount
    date
    tenant {
      id
      tenantName
    }
  }
}
    `;

/**
 * __useAllCompaniesProfitAndLossRowsQuery__
 *
 * To run a query within a React component, call `useAllCompaniesProfitAndLossRowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllCompaniesProfitAndLossRowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllCompaniesProfitAndLossRowsQuery({
 *   variables: {
 *      description: // value for 'description'
 *   },
 * });
 */
export function useAllCompaniesProfitAndLossRowsQuery(baseOptions: Apollo.QueryHookOptions<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables> & ({ variables: AllCompaniesProfitAndLossRowsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>(AllCompaniesProfitAndLossRowsDocument, options);
      }
export function useAllCompaniesProfitAndLossRowsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>(AllCompaniesProfitAndLossRowsDocument, options);
        }
export function useAllCompaniesProfitAndLossRowsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>(AllCompaniesProfitAndLossRowsDocument, options);
        }
export type AllCompaniesProfitAndLossRowsQueryHookResult = ReturnType<typeof useAllCompaniesProfitAndLossRowsQuery>;
export type AllCompaniesProfitAndLossRowsLazyQueryHookResult = ReturnType<typeof useAllCompaniesProfitAndLossRowsLazyQuery>;
export type AllCompaniesProfitAndLossRowsSuspenseQueryHookResult = ReturnType<typeof useAllCompaniesProfitAndLossRowsSuspenseQuery>;
export type AllCompaniesProfitAndLossRowsQueryResult = Apollo.QueryResult<AllCompaniesProfitAndLossRowsQuery, AllCompaniesProfitAndLossRowsQueryVariables>;