/* eslint-disable */
/*
 * This file is auto-generated by Graphweaver.
 * Please do not edit it directly.
 */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
	[_ in K]?: never;
};
export type Incremental<T> =
	| T
	| { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: { input: string; output: string };
	String: { input: string; output: string };
	Boolean: { input: boolean; output: boolean };
	Int: { input: number; output: number };
	Float: { input: number; output: number };
	/** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
	JSON: { input: any; output: any };
};

export type AdminUiEntityAttributeMetadata = {
	__typename?: 'AdminUiEntityAttributeMetadata';
	isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
	__typename?: 'AdminUiEntityMetadata';
	attributes: AdminUiEntityAttributeMetadata;
	backendId?: Maybe<Scalars['String']['output']>;
	fields: Array<AdminUiFieldMetadata>;
	name: Scalars['String']['output'];
	summaryField?: Maybe<Scalars['String']['output']>;
};

export type AdminUiEnumMetadata = {
	__typename?: 'AdminUiEnumMetadata';
	name: Scalars['String']['output'];
	values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
	__typename?: 'AdminUiEnumValueMetadata';
	name: Scalars['String']['output'];
	value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
	__typename?: 'AdminUiFieldAttributeMetadata';
	isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiFieldExtentionsMetadata = {
	__typename?: 'AdminUiFieldExtentionsMetadata';
	key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
	__typename?: 'AdminUiFieldMetadata';
	attributes?: Maybe<AdminUiFieldAttributeMetadata>;
	extensions?: Maybe<AdminUiFieldExtentionsMetadata>;
	filter?: Maybe<AdminUiFilterMetadata>;
	name: Scalars['String']['output'];
	relatedEntity?: Maybe<Scalars['String']['output']>;
	relationshipType?: Maybe<Scalars['String']['output']>;
	type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
	__typename?: 'AdminUiFilterMetadata';
	type: AdminUiFilterType;
};

export enum AdminUiFilterType {
	Boolean = 'BOOLEAN',
	DateRange = 'DATE_RANGE',
	Enum = 'ENUM',
	Numeric = 'NUMERIC',
	Relationship = 'RELATIONSHIP',
	Text = 'TEXT',
}

export type AdminUiMetadata = {
	__typename?: 'AdminUiMetadata';
	entities: Array<AdminUiEntityMetadata>;
	enums: Array<AdminUiEnumMetadata>;
};

export type Credential = {
	__typename?: 'Credential';
	id: Scalars['ID']['output'];
	username: Scalars['String']['output'];
};

export type CredentialCreateOrUpdateInput = {
	confirm?: InputMaybe<Scalars['String']['input']>;
	id: Scalars['ID']['input'];
	password?: InputMaybe<Scalars['String']['input']>;
	username?: InputMaybe<Scalars['String']['input']>;
};

export type CredentialInsertInput = {
	confirm: Scalars['String']['input'];
	password: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type CredentialsListFilter = {
	_and?: InputMaybe<Array<CredentialsListFilter>>;
	_not?: InputMaybe<CredentialsListFilter>;
	_or?: InputMaybe<Array<CredentialsListFilter>>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	username?: InputMaybe<Scalars['String']['input']>;
	username_ilike?: InputMaybe<Scalars['String']['input']>;
	username_in?: InputMaybe<Array<Scalars['String']['input']>>;
	username_like?: InputMaybe<Scalars['String']['input']>;
	username_ne?: InputMaybe<Scalars['String']['input']>;
	username_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	username_notnull?: InputMaybe<Scalars['String']['input']>;
	username_null?: InputMaybe<Scalars['String']['input']>;
};

export type CredentialsOrderByInput = {
	id?: InputMaybe<Sort>;
	username?: InputMaybe<Sort>;
};

export type CredentialsPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<CredentialsOrderByInput>;
};

export type Credential = {
	__typename?: 'Credential';
	id: Scalars['ID']['output'];
	username: Scalars['String']['output'];
};

export type CredentialsListFilter = {
	_and?: InputMaybe<Array<CredentialsListFilter>>;
	_not?: InputMaybe<CredentialsListFilter>;
	_or?: InputMaybe<Array<CredentialsListFilter>>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	username?: InputMaybe<Scalars['String']['input']>;
	username_ilike?: InputMaybe<Scalars['String']['input']>;
	username_in?: InputMaybe<Array<Scalars['String']['input']>>;
	username_like?: InputMaybe<Scalars['String']['input']>;
	username_ne?: InputMaybe<Scalars['String']['input']>;
	username_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	username_notnull?: InputMaybe<Scalars['String']['input']>;
	username_null?: InputMaybe<Scalars['String']['input']>;
};

export type CredentialsOrderByInput = {
	id?: InputMaybe<Sort>;
	username?: InputMaybe<Sort>;
};

export type CredentialsPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<CredentialsOrderByInput>;
};

export type Mutation = {
	__typename?: 'Mutation';
	challengePassword: Token;
	createCredential: Credential;
	createOrUpdateTags: Array<Tag>;
	createOrUpdateTasks: Array<Task>;
	createOrUpdateUsers: Array<User>;
	createTag: Tag;
	createTags: Array<Tag>;
	createTask: Task;
	createTasks: Array<Task>;
	createUser: User;
	createUsers: Array<User>;
	deleteTag: Scalars['Boolean']['output'];
	deleteTask: Scalars['Boolean']['output'];
	deleteUser: Scalars['Boolean']['output'];
	enrolWallet: Scalars['Boolean']['output'];
	loginPassword: Token;
	passkeyGenerateAuthenticationOptions: Scalars['JSON']['output'];
	passkeyGenerateRegistrationOptions: Scalars['JSON']['output'];
	passkeyVerifyAuthenticationResponse: Token;
	passkeyVerifyRegistrationResponse: Scalars['Boolean']['output'];
	sendChallengeMagicLink: Scalars['Boolean']['output'];
	sendLoginMagicLink: Scalars['Boolean']['output'];
	sendOTPChallenge: Scalars['Boolean']['output'];
	updateCredential: Credential;
	updateTag: Tag;
	updateTags: Array<Tag>;
	updateTask: Task;
	updateTasks: Array<Task>;
	updateUser: User;
	updateUsers: Array<User>;
	verifyChallengeMagicLink: Token;
	verifyLoginMagicLink: Token;
	verifyOTPChallenge: Token;
	verifyWeb3Challenge: Token;
};

export type MutationChallengePasswordArgs = {
	password: Scalars['String']['input'];
};

export type MutationCreateCredentialArgs = {
	data: CredentialInsertInput;
};

export type MutationCreateOrUpdateTagsArgs = {
	input: TagsCreateOrUpdateManyInput;
};

export type MutationCreateOrUpdateTasksArgs = {
	input: TasksCreateOrUpdateManyInput;
};

export type MutationCreateOrUpdateUsersArgs = {
	input: UsersCreateOrUpdateManyInput;
};

export type MutationCreateTagArgs = {
	data: TagInsertInput;
};

export type MutationCreateTagsArgs = {
	input: TagsInsertManyInput;
};

export type MutationCreateTaskArgs = {
	data: TaskInsertInput;
};

export type MutationCreateTasksArgs = {
	input: TasksInsertManyInput;
};

export type MutationCreateUserArgs = {
	data: UserInsertInput;
};

export type MutationCreateUsersArgs = {
	input: UsersInsertManyInput;
};

export type MutationDeleteTagArgs = {
	id: Scalars['ID']['input'];
};

export type MutationDeleteTaskArgs = {
	id: Scalars['ID']['input'];
};

export type MutationDeleteUserArgs = {
	id: Scalars['ID']['input'];
};

export type MutationEnrolWalletArgs = {
	token: Scalars['String']['input'];
};

export type MutationLoginPasswordArgs = {
	password: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type MutationPasskeyVerifyAuthenticationResponseArgs = {
	authenticationResponse: PasskeyAuthenticationResponse;
};

export type MutationPasskeyVerifyRegistrationResponseArgs = {
	registrationResponse: PasskeyRegistrationResponse;
};

export type MutationSendLoginMagicLinkArgs = {
	username: Scalars['String']['input'];
};

export type MutationUpdateCredentialArgs = {
	data: CredentialCreateOrUpdateInput;
};

export type MutationUpdateTagArgs = {
	data: TagCreateOrUpdateInput;
};

export type MutationUpdateTagsArgs = {
	input: TagsUpdateManyInput;
};

export type MutationUpdateTaskArgs = {
	data: TaskCreateOrUpdateInput;
};

export type MutationUpdateTasksArgs = {
	input: TasksUpdateManyInput;
};

export type MutationUpdateUserArgs = {
	data: UserCreateOrUpdateInput;
};

export type MutationUpdateUsersArgs = {
	input: UsersUpdateManyInput;
};

export type MutationVerifyChallengeMagicLinkArgs = {
	token: Scalars['String']['input'];
};

export type MutationVerifyLoginMagicLinkArgs = {
	token: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type MutationVerifyOtpChallengeArgs = {
	code: Scalars['String']['input'];
};

export type MutationVerifyWeb3ChallengeArgs = {
	token: Scalars['String']['input'];
};

export type PasskeyAuthenticationResponse = {
	authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
	clientExtensionResults: Scalars['JSON']['input'];
	id: Scalars['ID']['input'];
	rawId: Scalars['String']['input'];
	response: Scalars['JSON']['input'];
	type: Scalars['String']['input'];
};

export type PasskeyRegistrationResponse = {
	authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
	clientExtensionResults: Scalars['JSON']['input'];
	id: Scalars['ID']['input'];
	rawId: Scalars['String']['input'];
	response: Scalars['JSON']['input'];
	type: Scalars['String']['input'];
};

export enum Priority {
	/** HIGH */
	High = 'HIGH',
	/** LOW */
	Low = 'LOW',
	/** MEDIUM */
	Medium = 'MEDIUM',
}

export type Query = {
	__typename?: 'Query';
	_graphweaver: AdminUiMetadata;
	canEnrolWallet: Scalars['Boolean']['output'];
	credential?: Maybe<Credential>;
	credentials: Array<Credential>;
	tag?: Maybe<Tag>;
	tags: Array<Tag>;
	task?: Maybe<Task>;
	tasks: Array<Task>;
	user?: Maybe<User>;
	users: Array<User>;
};

export type QueryCredentialArgs = {
	id: Scalars['ID']['input'];
};

export type QueryCredentialsArgs = {
	filter?: InputMaybe<CredentialsListFilter>;
	pagination?: InputMaybe<CredentialsPaginationInput>;
};

export type QueryTagArgs = {
	id: Scalars['ID']['input'];
};

export type QueryTagsArgs = {
	filter?: InputMaybe<TagsListFilter>;
	pagination?: InputMaybe<TagsPaginationInput>;
};

export type QueryTaskArgs = {
	id: Scalars['ID']['input'];
};

export type QueryTasksArgs = {
	filter?: InputMaybe<TasksListFilter>;
	pagination?: InputMaybe<TasksPaginationInput>;
};

export type QueryUserArgs = {
	id: Scalars['ID']['input'];
};

export type QueryUsersArgs = {
	pagination?: InputMaybe<UsersPaginationInput>;
	filter?: InputMaybe<UsersListFilter>;
};

export type QueryUserArgs = {
	id: Scalars['ID']['input'];
};

export type QueryTagsArgs = {
	pagination?: InputMaybe<TagsPaginationInput>;
	filter?: InputMaybe<TagsListFilter>;
};

export type QueryTagArgs = {
	id: Scalars['ID']['input'];
};

export type QueryTasksArgs = {
	pagination?: InputMaybe<TasksPaginationInput>;
	filter?: InputMaybe<TasksListFilter>;
};

export type QueryTaskArgs = {
	id: Scalars['ID']['input'];
};

export type User = {
	__typename?: 'User';
	id: Scalars['ID']['output'];
	name: Scalars['String']['output'];
};

export type UsersPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<UsersOrderByInput>;
};

export type UsersOrderByInput = {
	id?: InputMaybe<Sort>;
	name?: InputMaybe<Sort>;
};

export enum Sort {
	Asc = 'ASC',
	Desc = 'DESC',
}

export type UsersListFilter = {
	_and?: InputMaybe<Array<UsersListFilter>>;
	_or?: InputMaybe<Array<UsersListFilter>>;
	_not?: InputMaybe<UsersListFilter>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	name?: InputMaybe<Scalars['String']['input']>;
	name_ne?: InputMaybe<Scalars['String']['input']>;
	name_in?: InputMaybe<Array<Scalars['String']['input']>>;
	name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	name_like?: InputMaybe<Scalars['String']['input']>;
	name_ilike?: InputMaybe<Scalars['String']['input']>;
	name_notnull?: InputMaybe<Scalars['String']['input']>;
	name_null?: InputMaybe<Scalars['String']['input']>;
};

export type Tag = {
	__typename?: 'Tag';
	id: Scalars['ID']['output'];
	name: Scalars['String']['output'];
	tasks?: Maybe<Array<Task>>;
};

export type TagTasksArgs = {
	filter?: InputMaybe<TasksListFilter>;
};

export type Task = {
	__typename?: 'Task';
	id: Scalars['ID']['output'];
	description: Scalars['String']['output'];
	isCompleted: Scalars['Boolean']['output'];
	user?: Maybe<User>;
	tags?: Maybe<Array<Tag>>;
	priority?: Maybe<Priority>;
	slug?: Maybe<Scalars['String']['output']>;
};

export type TaskTagsArgs = {
	filter?: InputMaybe<TagsListFilter>;
};

export type TagsListFilter = {
	_and?: InputMaybe<Array<TagsListFilter>>;
	_or?: InputMaybe<Array<TagsListFilter>>;
	_not?: InputMaybe<TagsListFilter>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	name?: InputMaybe<Scalars['String']['input']>;
	name_ne?: InputMaybe<Scalars['String']['input']>;
	name_in?: InputMaybe<Array<Scalars['String']['input']>>;
	name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	name_like?: InputMaybe<Scalars['String']['input']>;
	name_ilike?: InputMaybe<Scalars['String']['input']>;
	name_notnull?: InputMaybe<Scalars['String']['input']>;
	name_null?: InputMaybe<Scalars['String']['input']>;
	tasks?: InputMaybe<TasksListFilter>;
};

export type TasksListFilter = {
	_and?: InputMaybe<Array<TasksListFilter>>;
	_or?: InputMaybe<Array<TasksListFilter>>;
	_not?: InputMaybe<TasksListFilter>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	description?: InputMaybe<Scalars['String']['input']>;
	description_ne?: InputMaybe<Scalars['String']['input']>;
	description_in?: InputMaybe<Array<Scalars['String']['input']>>;
	description_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	description_like?: InputMaybe<Scalars['String']['input']>;
	description_ilike?: InputMaybe<Scalars['String']['input']>;
	description_notnull?: InputMaybe<Scalars['String']['input']>;
	description_null?: InputMaybe<Scalars['String']['input']>;
	isCompleted?: InputMaybe<Scalars['Boolean']['input']>;
	user?: InputMaybe<UsersListFilter>;
	tags?: InputMaybe<TagsListFilter>;
	priority?: InputMaybe<Priority>;
	priority_ne?: InputMaybe<Priority>;
	priority_in?: InputMaybe<Array<Priority>>;
	priority_nin?: InputMaybe<Array<Priority>>;
	priority_notnull?: InputMaybe<Priority>;
	priority_null?: InputMaybe<Priority>;
	slug?: InputMaybe<Scalars['String']['input']>;
	slug_ne?: InputMaybe<Scalars['String']['input']>;
	slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
	slug_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	slug_like?: InputMaybe<Scalars['String']['input']>;
	slug_ilike?: InputMaybe<Scalars['String']['input']>;
	slug_notnull?: InputMaybe<Scalars['String']['input']>;
	slug_null?: InputMaybe<Scalars['String']['input']>;
};

export enum Priority {
	/** HIGH */
	High = 'HIGH',
	/** MEDIUM */
	Medium = 'MEDIUM',
	/** LOW */
	Low = 'LOW',
}

export type TagsPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<TagsOrderByInput>;
};

export type TagsOrderByInput = {
	id?: InputMaybe<Sort>;
	name?: InputMaybe<Sort>;
	tasks?: InputMaybe<Sort>;
};

export type TasksPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<TasksOrderByInput>;
};

export type TasksOrderByInput = {
	id?: InputMaybe<Sort>;
	description?: InputMaybe<Sort>;
	priority?: InputMaybe<Sort>;
	slug?: InputMaybe<Sort>;
};

export type AdminUiMetadata = {
	__typename?: 'AdminUiMetadata';
	entities: Array<AdminUiEntityMetadata>;
	enums: Array<AdminUiEnumMetadata>;
};

export type AdminUiEntityMetadata = {
	__typename?: 'AdminUiEntityMetadata';
	name: Scalars['String']['output'];
	backendId?: Maybe<Scalars['String']['output']>;
	summaryField?: Maybe<Scalars['String']['output']>;
	fields: Array<AdminUiFieldMetadata>;
	attributes: AdminUiEntityAttributeMetadata;
};

export type AdminUiFieldMetadata = {
	__typename?: 'AdminUiFieldMetadata';
	name: Scalars['String']['output'];
	type: Scalars['String']['output'];
	relationshipType?: Maybe<Scalars['String']['output']>;
	relatedEntity?: Maybe<Scalars['String']['output']>;
	filter?: Maybe<AdminUiFilterMetadata>;
	attributes?: Maybe<AdminUiFieldAttributeMetadata>;
};

export type AdminUiFilterMetadata = {
	__typename?: 'AdminUiFilterMetadata';
	type: AdminUiFilterType;
};

export enum AdminUiFilterType {
	DateRange = 'DATE_RANGE',
	Enum = 'ENUM',
	Numeric = 'NUMERIC',
	Relationship = 'RELATIONSHIP',
	Text = 'TEXT',
	Boolean = 'BOOLEAN',
}

export type AdminUiFieldAttributeMetadata = {
	__typename?: 'AdminUiFieldAttributeMetadata';
	isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityAttributeMetadata = {
	__typename?: 'AdminUiEntityAttributeMetadata';
	isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEnumMetadata = {
	__typename?: 'AdminUiEnumMetadata';
	name: Scalars['String']['output'];
	values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
	__typename?: 'AdminUiEnumValueMetadata';
	name: Scalars['String']['output'];
	value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
	__typename?: 'AdminUiFieldAttributeMetadata';
	isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiFieldMetadata = {
	__typename?: 'AdminUiFieldMetadata';
	attributes?: Maybe<AdminUiFieldAttributeMetadata>;
	filter?: Maybe<AdminUiFilterMetadata>;
	name: Scalars['String']['output'];
	relatedEntity?: Maybe<Scalars['String']['output']>;
	relationshipType?: Maybe<Scalars['String']['output']>;
	type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
	__typename?: 'AdminUiFilterMetadata';
	type: AdminUiFilterType;
};

export enum AdminUiFilterType {
	Boolean = 'BOOLEAN',
	DateRange = 'DATE_RANGE',
	Enum = 'ENUM',
	Numeric = 'NUMERIC',
	Relationship = 'RELATIONSHIP',
	Text = 'TEXT',
}

export type AdminUiMetadata = {
	__typename?: 'AdminUiMetadata';
	entities: Array<AdminUiEntityMetadata>;
	enums: Array<AdminUiEnumMetadata>;
};

export type Credential = {
	__typename?: 'Credential';
	id: Scalars['ID']['output'];
	username: Scalars['String']['output'];
};

export type CredentialsListFilter = {
	_and?: InputMaybe<Array<CredentialsListFilter>>;
	_not?: InputMaybe<CredentialsListFilter>;
	_or?: InputMaybe<Array<CredentialsListFilter>>;
	id?: InputMaybe<Scalars['ID']['input']>;
	id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_ne?: InputMaybe<Scalars['ID']['input']>;
	id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
	id_notnull?: InputMaybe<Scalars['ID']['input']>;
	id_null?: InputMaybe<Scalars['ID']['input']>;
	username?: InputMaybe<Scalars['String']['input']>;
	username_ilike?: InputMaybe<Scalars['String']['input']>;
	username_in?: InputMaybe<Array<Scalars['String']['input']>>;
	username_like?: InputMaybe<Scalars['String']['input']>;
	username_ne?: InputMaybe<Scalars['String']['input']>;
	username_nin?: InputMaybe<Array<Scalars['String']['input']>>;
	username_notnull?: InputMaybe<Scalars['String']['input']>;
	username_null?: InputMaybe<Scalars['String']['input']>;
};

export type CredentialsOrderByInput = {
	id?: InputMaybe<Sort>;
	username?: InputMaybe<Sort>;
};

export type CredentialsPaginationInput = {
	limit?: InputMaybe<Scalars['Int']['input']>;
	offset?: InputMaybe<Scalars['Int']['input']>;
	orderBy?: InputMaybe<CredentialsOrderByInput>;
};

export type Mutation = {
	__typename?: 'Mutation';
	createLoginPassword: Token;
	loginPassword: Token;
	challengePassword: Token;
	sendLoginMagicLink: Scalars['Boolean']['output'];
	verifyLoginMagicLink: Token;
	sendChallengeMagicLink: Scalars['Boolean']['output'];
	verifyChallengeMagicLink: Token;
	sendOTPChallenge: Scalars['Boolean']['output'];
	verifyOTPChallenge: Token;
	enrolWallet: Scalars['Boolean']['output'];
	verifyWeb3Challenge: Token;
	passkeyGenerateRegistrationOptions: Scalars['JSON']['output'];
	passkeyVerifyRegistrationResponse: Scalars['Boolean']['output'];
	passkeyGenerateAuthenticationOptions: Scalars['JSON']['output'];
	passkeyVerifyAuthenticationResponse: Token;
	createUsers: Array<User>;
	createUser: User;
	updateUsers: Array<User>;
	createOrUpdateUsers: Array<User>;
	updateUser: User;
	deleteUser: Scalars['Boolean']['output'];
	createTags: Array<Tag>;
	createTag: Tag;
	updateTags: Array<Tag>;
	createOrUpdateTags: Array<Tag>;
	updateTag: Tag;
	deleteTag: Scalars['Boolean']['output'];
	createTasks: Array<Task>;
	createTask: Task;
	updateTasks: Array<Task>;
	createOrUpdateTasks: Array<Task>;
	updateTask: Task;
	deleteTask: Scalars['Boolean']['output'];
};

export type MutationCreateLoginPasswordArgs = {
	confirm: Scalars['String']['input'];
	password: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type MutationLoginPasswordArgs = {
	password: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type MutationChallengePasswordArgs = {
	password: Scalars['String']['input'];
};

export type MutationSendLoginMagicLinkArgs = {
	username: Scalars['String']['input'];
};

export type MutationVerifyLoginMagicLinkArgs = {
	token: Scalars['String']['input'];
	username: Scalars['String']['input'];
};

export type MutationVerifyChallengeMagicLinkArgs = {
	token: Scalars['String']['input'];
};

export type MutationVerifyOtpChallengeArgs = {
	code: Scalars['String']['input'];
};

export type MutationEnrolWalletArgs = {
	token: Scalars['String']['input'];
};

export type MutationVerifyWeb3ChallengeArgs = {
	token: Scalars['String']['input'];
};

export type MutationPasskeyVerifyRegistrationResponseArgs = {
	registrationResponse: PasskeyRegistrationResponse;
};

export type MutationPasskeyVerifyAuthenticationResponseArgs = {
	authenticationResponse: PasskeyAuthenticationResponse;
};

export type MutationCreateUsersArgs = {
	input: UsersInsertManyInput;
};

export type MutationCreateUserArgs = {
	data: UserInsertInput;
};

export type MutationUpdateUsersArgs = {
	input: UsersUpdateManyInput;
};

export type MutationCreateOrUpdateUsersArgs = {
	input: UsersCreateOrUpdateManyInput;
};

export type MutationUpdateUserArgs = {
	data: UserCreateOrUpdateInput;
};

export type MutationDeleteUserArgs = {
	id: Scalars['ID']['input'];
};

export type MutationCreateTagsArgs = {
	input: TagsInsertManyInput;
};

export type MutationCreateTagArgs = {
	data: TagInsertInput;
};

export type MutationUpdateTagsArgs = {
	input: TagsUpdateManyInput;
};

export type MutationCreateOrUpdateTagsArgs = {
	input: TagsCreateOrUpdateManyInput;
};

export type MutationUpdateTagArgs = {
	data: TagCreateOrUpdateInput;
};

export type MutationDeleteTagArgs = {
	id: Scalars['ID']['input'];
};

export type MutationCreateTasksArgs = {
	input: TasksInsertManyInput;
};

export type MutationCreateTaskArgs = {
	data: TaskInsertInput;
};

export type MutationUpdateTasksArgs = {
	input: TasksUpdateManyInput;
};

export type MutationCreateOrUpdateTasksArgs = {
	input: TasksCreateOrUpdateManyInput;
};

export type MutationUpdateTaskArgs = {
	data: TaskCreateOrUpdateInput;
};

export type MutationDeleteTaskArgs = {
	id: Scalars['ID']['input'];
};

export type Token = {
	__typename?: 'Token';
	authToken: Scalars['String']['output'];
};

export type PasskeyRegistrationResponse = {
	id: Scalars['ID']['input'];
	rawId: Scalars['String']['input'];
	response: Scalars['JSON']['input'];
	authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
	clientExtensionResults: Scalars['JSON']['input'];
	type: Scalars['String']['input'];
};

export enum Priority {
	/** HIGH */
	High = 'HIGH',
	/** LOW */
	Low = 'LOW',
	/** MEDIUM */
	Medium = 'MEDIUM',
}

export type Query = {
	__typename?: 'Query';
	_graphweaver: AdminUiMetadata;
	canEnrolWallet: Scalars['Boolean']['output'];
	credential?: Maybe<Credential>;
	credentials: Array<Credential>;
	tag?: Maybe<Tag>;
	tags: Array<Tag>;
	task?: Maybe<Task>;
	tasks: Array<Task>;
	user?: Maybe<User>;
	users: Array<User>;
};

export type QueryCredentialArgs = {
	id: Scalars['ID']['input'];
};

export type QueryCredentialsArgs = {
	filter?: InputMaybe<CredentialsListFilter>;
	pagination?: InputMaybe<CredentialsPaginationInput>;
};

export type QueryTagArgs = {
	id: Scalars['ID']['input'];
	rawId: Scalars['String']['input'];
	response: Scalars['JSON']['input'];
	authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
	clientExtensionResults: Scalars['JSON']['input'];
	type: Scalars['String']['input'];
};

export type UsersInsertManyInput = {
	data: Array<UserInsertInput>;
};

export type UserInsertInput = {
	name: Scalars['String']['input'];
};

export type UsersUpdateManyInput = {
	data: Array<UserCreateOrUpdateInput>;
};

export type UserCreateOrUpdateInput = {
	id?: InputMaybe<Scalars['ID']['input']>;
	name?: InputMaybe<Scalars['String']['input']>;
};

export type UsersCreateOrUpdateManyInput = {
	data: Array<UserCreateOrUpdateInput>;
};

export type TagsInsertManyInput = {
	data: Array<TagInsertInput>;
};

export type TagInsertInput = {
	name: Scalars['String']['input'];
	tasks?: InputMaybe<Array<TaskCreateOrUpdateInput>>;
};

export type TaskCreateOrUpdateInput = {
	id?: InputMaybe<Scalars['ID']['input']>;
	description?: InputMaybe<Scalars['String']['input']>;
	isCompleted?: InputMaybe<Scalars['Boolean']['input']>;
	user?: InputMaybe<UserCreateOrUpdateInput>;
	tags?: InputMaybe<Array<TagCreateOrUpdateInput>>;
	priority?: InputMaybe<Priority>;
	slug?: InputMaybe<Scalars['String']['input']>;
};

export type TagCreateOrUpdateInput = {
	id?: InputMaybe<Scalars['ID']['input']>;
	name?: InputMaybe<Scalars['String']['input']>;
	tasks?: InputMaybe<Array<TaskCreateOrUpdateInput>>;
};

export type TagsUpdateManyInput = {
	data: Array<TagCreateOrUpdateInput>;
};

export type TagsCreateOrUpdateManyInput = {
	data: Array<TagCreateOrUpdateInput>;
};

export type TasksInsertManyInput = {
	data: Array<TaskInsertInput>;
};

export type TaskInsertInput = {
	description: Scalars['String']['input'];
	isCompleted?: InputMaybe<Scalars['Boolean']['input']>;
	user?: InputMaybe<UserCreateOrUpdateInput>;
	tags?: InputMaybe<Array<TagCreateOrUpdateInput>>;
	priority?: InputMaybe<Priority>;
	slug?: InputMaybe<Scalars['String']['input']>;
};

export type TasksUpdateManyInput = {
	data: Array<TaskCreateOrUpdateInput>;
};

export type TasksCreateOrUpdateManyInput = {
	data: Array<TaskCreateOrUpdateInput>;
};
