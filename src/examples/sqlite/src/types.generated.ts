/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** Returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix "Z". */
  ISOString: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  fields: Array<AdminUiFieldMetadata>;
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type Album = {
  __typename?: 'Album';
  artist: Artist;
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  tracks: Array<Track>;
};


export type AlbumArtistArgs = {
  filter?: InputMaybe<ArtistsListFilter>;
};


export type AlbumTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
};

/** Data needed to create or update Albums. If an ID is passed, this is an update, otherwise it's an insert. */
export type AlbumCreateOrUpdateInput = {
  artist?: InputMaybe<ArtistCreateOrUpdateInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to create Albums. */
export type AlbumInsertInput = {
  artist?: InputMaybe<ArtistCreateOrUpdateInput>;
  title: Scalars['String']['input'];
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to update Albums. An ID must be passed. */
export type AlbumUpdateInput = {
  artist?: InputMaybe<ArtistCreateOrUpdateInput>;
  id: Scalars['ID']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

export type AlbumsListFilter = {
  artist?: InputMaybe<ArtistsListFilter>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  title_ilike?: InputMaybe<Scalars['String']['input']>;
  title_in?: InputMaybe<Array<Scalars['String']['input']>>;
  title_like?: InputMaybe<Scalars['String']['input']>;
  title_ne?: InputMaybe<Scalars['String']['input']>;
  title_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  title_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  title_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type AlbumsOrderByInput = {
  id?: InputMaybe<Sort>;
  title?: InputMaybe<Sort>;
};

/** Pagination options for Albums. */
export type AlbumsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AlbumsOrderByInput>;
};

export type Artist = {
  __typename?: 'Artist';
  albums: Array<Album>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};


export type ArtistAlbumsArgs = {
  filter?: InputMaybe<AlbumsListFilter>;
};

/** Data needed to create or update Artists. If an ID is passed, this is an update, otherwise it's an insert. */
export type ArtistCreateOrUpdateInput = {
  albums?: InputMaybe<Array<AlbumCreateOrUpdateInput>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Artists. */
export type ArtistInsertInput = {
  albums?: InputMaybe<Array<AlbumCreateOrUpdateInput>>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Artists. An ID must be passed. */
export type ArtistUpdateInput = {
  albums?: InputMaybe<Array<AlbumCreateOrUpdateInput>>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type ArtistsListFilter = {
  albums?: InputMaybe<AlbumsListFilter>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ArtistsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Artists. */
export type ArtistsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ArtistsOrderByInput>;
};

export type Customer = {
  __typename?: 'Customer';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  employee?: Maybe<Employee>;
  fax?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  invoices: Array<Invoice>;
  lastName: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
};


export type CustomerEmployeeArgs = {
  filter?: InputMaybe<EmployeesListFilter>;
};


export type CustomerInvoicesArgs = {
  filter?: InputMaybe<InvoicesListFilter>;
};

/** Data needed to create or update Customers. If an ID is passed, this is an update, otherwise it's an insert. */
export type CustomerCreateOrUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  invoices?: InputMaybe<Array<InvoiceCreateOrUpdateInput>>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Customers. */
export type CustomerInsertInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName: Scalars['String']['input'];
  invoices?: InputMaybe<Array<InvoiceCreateOrUpdateInput>>;
  lastName: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Customers. An ID must be passed. */
export type CustomerUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  invoices?: InputMaybe<Array<InvoiceCreateOrUpdateInput>>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
};

export type CustomersListFilter = {
  address?: InputMaybe<Scalars['String']['input']>;
  address_ilike?: InputMaybe<Scalars['String']['input']>;
  address_in?: InputMaybe<Array<Scalars['String']['input']>>;
  address_like?: InputMaybe<Scalars['String']['input']>;
  address_ne?: InputMaybe<Scalars['String']['input']>;
  address_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  address_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  address_null?: InputMaybe<Scalars['Boolean']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  city_ilike?: InputMaybe<Scalars['String']['input']>;
  city_in?: InputMaybe<Array<Scalars['String']['input']>>;
  city_like?: InputMaybe<Scalars['String']['input']>;
  city_ne?: InputMaybe<Scalars['String']['input']>;
  city_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  city_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  city_null?: InputMaybe<Scalars['Boolean']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  company_ilike?: InputMaybe<Scalars['String']['input']>;
  company_in?: InputMaybe<Array<Scalars['String']['input']>>;
  company_like?: InputMaybe<Scalars['String']['input']>;
  company_ne?: InputMaybe<Scalars['String']['input']>;
  company_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  company_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  company_null?: InputMaybe<Scalars['Boolean']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  country_ilike?: InputMaybe<Scalars['String']['input']>;
  country_in?: InputMaybe<Array<Scalars['String']['input']>>;
  country_like?: InputMaybe<Scalars['String']['input']>;
  country_ne?: InputMaybe<Scalars['String']['input']>;
  country_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  country_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  country_null?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  email_ilike?: InputMaybe<Scalars['String']['input']>;
  email_in?: InputMaybe<Array<Scalars['String']['input']>>;
  email_like?: InputMaybe<Scalars['String']['input']>;
  email_ne?: InputMaybe<Scalars['String']['input']>;
  email_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  email_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  email_null?: InputMaybe<Scalars['Boolean']['input']>;
  employee?: InputMaybe<EmployeesListFilter>;
  fax?: InputMaybe<Scalars['String']['input']>;
  fax_ilike?: InputMaybe<Scalars['String']['input']>;
  fax_in?: InputMaybe<Array<Scalars['String']['input']>>;
  fax_like?: InputMaybe<Scalars['String']['input']>;
  fax_ne?: InputMaybe<Scalars['String']['input']>;
  fax_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  fax_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  fax_null?: InputMaybe<Scalars['Boolean']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  firstName_ilike?: InputMaybe<Scalars['String']['input']>;
  firstName_in?: InputMaybe<Array<Scalars['String']['input']>>;
  firstName_like?: InputMaybe<Scalars['String']['input']>;
  firstName_ne?: InputMaybe<Scalars['String']['input']>;
  firstName_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  firstName_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  firstName_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoices?: InputMaybe<InvoicesListFilter>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  lastName_ilike?: InputMaybe<Scalars['String']['input']>;
  lastName_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lastName_like?: InputMaybe<Scalars['String']['input']>;
  lastName_ne?: InputMaybe<Scalars['String']['input']>;
  lastName_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  lastName_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  lastName_null?: InputMaybe<Scalars['Boolean']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  phone_ilike?: InputMaybe<Scalars['String']['input']>;
  phone_in?: InputMaybe<Array<Scalars['String']['input']>>;
  phone_like?: InputMaybe<Scalars['String']['input']>;
  phone_ne?: InputMaybe<Scalars['String']['input']>;
  phone_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  phone_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  phone_null?: InputMaybe<Scalars['Boolean']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  postalCode_ilike?: InputMaybe<Scalars['String']['input']>;
  postalCode_in?: InputMaybe<Array<Scalars['String']['input']>>;
  postalCode_like?: InputMaybe<Scalars['String']['input']>;
  postalCode_ne?: InputMaybe<Scalars['String']['input']>;
  postalCode_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  postalCode_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  postalCode_null?: InputMaybe<Scalars['Boolean']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  state_ilike?: InputMaybe<Scalars['String']['input']>;
  state_in?: InputMaybe<Array<Scalars['String']['input']>>;
  state_like?: InputMaybe<Scalars['String']['input']>;
  state_ne?: InputMaybe<Scalars['String']['input']>;
  state_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  state_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  state_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomersOrderByInput = {
  address?: InputMaybe<Sort>;
  city?: InputMaybe<Sort>;
  company?: InputMaybe<Sort>;
  country?: InputMaybe<Sort>;
  email?: InputMaybe<Sort>;
  fax?: InputMaybe<Sort>;
  firstName?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  lastName?: InputMaybe<Sort>;
  phone?: InputMaybe<Sort>;
  postalCode?: InputMaybe<Sort>;
  state?: InputMaybe<Sort>;
};

/** Pagination options for Customers. */
export type CustomersPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CustomersOrderByInput>;
};

export type DeleteOneFilterInput = {
  id: Scalars['ID']['input'];
};

export type Employee = {
  __typename?: 'Employee';
  address?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISOString']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  customers: Array<Customer>;
  email?: Maybe<Scalars['String']['output']>;
  employee?: Maybe<Employee>;
  employees: Array<Employee>;
  fax?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  hireDate?: Maybe<Scalars['ISOString']['output']>;
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type EmployeeCustomersArgs = {
  filter?: InputMaybe<CustomersListFilter>;
};


export type EmployeeEmployeeArgs = {
  filter?: InputMaybe<EmployeesListFilter>;
};


export type EmployeeEmployeesArgs = {
  filter?: InputMaybe<EmployeesListFilter>;
};

/** Data needed to create or update Employees. If an ID is passed, this is an update, otherwise it's an insert. */
export type EmployeeCreateOrUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  birthDate?: InputMaybe<Scalars['ISOString']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  customers?: InputMaybe<Array<CustomerCreateOrUpdateInput>>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  employees?: InputMaybe<Array<EmployeeCreateOrUpdateInput>>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  hireDate?: InputMaybe<Scalars['ISOString']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Employees. */
export type EmployeeInsertInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  birthDate?: InputMaybe<Scalars['ISOString']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  customers?: InputMaybe<Array<CustomerCreateOrUpdateInput>>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  employees?: InputMaybe<Array<EmployeeCreateOrUpdateInput>>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName: Scalars['String']['input'];
  hireDate?: InputMaybe<Scalars['ISOString']['input']>;
  lastName: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Employees. An ID must be passed. */
export type EmployeeUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  birthDate?: InputMaybe<Scalars['ISOString']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  customers?: InputMaybe<Array<CustomerCreateOrUpdateInput>>;
  email?: InputMaybe<Scalars['String']['input']>;
  employee?: InputMaybe<EmployeeCreateOrUpdateInput>;
  employees?: InputMaybe<Array<EmployeeCreateOrUpdateInput>>;
  fax?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  hireDate?: InputMaybe<Scalars['ISOString']['input']>;
  id: Scalars['ID']['input'];
  lastName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EmployeesListFilter = {
  address?: InputMaybe<Scalars['String']['input']>;
  address_ilike?: InputMaybe<Scalars['String']['input']>;
  address_in?: InputMaybe<Array<Scalars['String']['input']>>;
  address_like?: InputMaybe<Scalars['String']['input']>;
  address_ne?: InputMaybe<Scalars['String']['input']>;
  address_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  address_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  address_null?: InputMaybe<Scalars['Boolean']['input']>;
  birthDate?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  birthDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  birthDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  birthDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  birthDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  city_ilike?: InputMaybe<Scalars['String']['input']>;
  city_in?: InputMaybe<Array<Scalars['String']['input']>>;
  city_like?: InputMaybe<Scalars['String']['input']>;
  city_ne?: InputMaybe<Scalars['String']['input']>;
  city_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  city_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  city_null?: InputMaybe<Scalars['Boolean']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  country_ilike?: InputMaybe<Scalars['String']['input']>;
  country_in?: InputMaybe<Array<Scalars['String']['input']>>;
  country_like?: InputMaybe<Scalars['String']['input']>;
  country_ne?: InputMaybe<Scalars['String']['input']>;
  country_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  country_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  country_null?: InputMaybe<Scalars['Boolean']['input']>;
  customers?: InputMaybe<CustomersListFilter>;
  email?: InputMaybe<Scalars['String']['input']>;
  email_ilike?: InputMaybe<Scalars['String']['input']>;
  email_in?: InputMaybe<Array<Scalars['String']['input']>>;
  email_like?: InputMaybe<Scalars['String']['input']>;
  email_ne?: InputMaybe<Scalars['String']['input']>;
  email_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  email_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  email_null?: InputMaybe<Scalars['Boolean']['input']>;
  employee?: InputMaybe<EmployeesListFilter>;
  employees?: InputMaybe<EmployeesListFilter>;
  fax?: InputMaybe<Scalars['String']['input']>;
  fax_ilike?: InputMaybe<Scalars['String']['input']>;
  fax_in?: InputMaybe<Array<Scalars['String']['input']>>;
  fax_like?: InputMaybe<Scalars['String']['input']>;
  fax_ne?: InputMaybe<Scalars['String']['input']>;
  fax_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  fax_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  fax_null?: InputMaybe<Scalars['Boolean']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  firstName_ilike?: InputMaybe<Scalars['String']['input']>;
  firstName_in?: InputMaybe<Array<Scalars['String']['input']>>;
  firstName_like?: InputMaybe<Scalars['String']['input']>;
  firstName_ne?: InputMaybe<Scalars['String']['input']>;
  firstName_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  firstName_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  firstName_null?: InputMaybe<Scalars['Boolean']['input']>;
  hireDate?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  hireDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  hireDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  hireDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  hireDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  lastName_ilike?: InputMaybe<Scalars['String']['input']>;
  lastName_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lastName_like?: InputMaybe<Scalars['String']['input']>;
  lastName_ne?: InputMaybe<Scalars['String']['input']>;
  lastName_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  lastName_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  lastName_null?: InputMaybe<Scalars['Boolean']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  phone_ilike?: InputMaybe<Scalars['String']['input']>;
  phone_in?: InputMaybe<Array<Scalars['String']['input']>>;
  phone_like?: InputMaybe<Scalars['String']['input']>;
  phone_ne?: InputMaybe<Scalars['String']['input']>;
  phone_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  phone_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  phone_null?: InputMaybe<Scalars['Boolean']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  postalCode_ilike?: InputMaybe<Scalars['String']['input']>;
  postalCode_in?: InputMaybe<Array<Scalars['String']['input']>>;
  postalCode_like?: InputMaybe<Scalars['String']['input']>;
  postalCode_ne?: InputMaybe<Scalars['String']['input']>;
  postalCode_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  postalCode_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  postalCode_null?: InputMaybe<Scalars['Boolean']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  state_ilike?: InputMaybe<Scalars['String']['input']>;
  state_in?: InputMaybe<Array<Scalars['String']['input']>>;
  state_like?: InputMaybe<Scalars['String']['input']>;
  state_ne?: InputMaybe<Scalars['String']['input']>;
  state_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  state_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  state_null?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  title_ilike?: InputMaybe<Scalars['String']['input']>;
  title_in?: InputMaybe<Array<Scalars['String']['input']>>;
  title_like?: InputMaybe<Scalars['String']['input']>;
  title_ne?: InputMaybe<Scalars['String']['input']>;
  title_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  title_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  title_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EmployeesOrderByInput = {
  address?: InputMaybe<Sort>;
  birthDate?: InputMaybe<Sort>;
  city?: InputMaybe<Sort>;
  country?: InputMaybe<Sort>;
  email?: InputMaybe<Sort>;
  fax?: InputMaybe<Sort>;
  firstName?: InputMaybe<Sort>;
  hireDate?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  lastName?: InputMaybe<Sort>;
  phone?: InputMaybe<Sort>;
  postalCode?: InputMaybe<Sort>;
  state?: InputMaybe<Sort>;
  title?: InputMaybe<Sort>;
};

/** Pagination options for Employees. */
export type EmployeesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EmployeesOrderByInput>;
};

export type Genre = {
  __typename?: 'Genre';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};


export type GenreTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
};

/** Data needed to create or update Genres. If an ID is passed, this is an update, otherwise it's an insert. */
export type GenreCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to create Genres. */
export type GenreInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to update Genres. An ID must be passed. */
export type GenreUpdateInput = {
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

export type GenresListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type GenresOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Genres. */
export type GenresPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<GenresOrderByInput>;
};

export type Invoice = {
  __typename?: 'Invoice';
  billingAddress?: Maybe<Scalars['String']['output']>;
  billingCity?: Maybe<Scalars['String']['output']>;
  billingCountry?: Maybe<Scalars['String']['output']>;
  billingPostalCode?: Maybe<Scalars['String']['output']>;
  billingState?: Maybe<Scalars['String']['output']>;
  customer: Customer;
  id: Scalars['ID']['output'];
  invoiceDate: Scalars['ISOString']['output'];
  invoiceLines: Array<InvoiceLine>;
  total: Scalars['String']['output'];
};


export type InvoiceCustomerArgs = {
  filter?: InputMaybe<CustomersListFilter>;
};


export type InvoiceInvoiceLinesArgs = {
  filter?: InputMaybe<InvoiceLinesListFilter>;
};

/** Data needed to create or update Invoices. If an ID is passed, this is an update, otherwise it's an insert. */
export type InvoiceCreateOrUpdateInput = {
  billingAddress?: InputMaybe<Scalars['String']['input']>;
  billingCity?: InputMaybe<Scalars['String']['input']>;
  billingCountry?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode?: InputMaybe<Scalars['String']['input']>;
  billingState?: InputMaybe<Scalars['String']['input']>;
  customer?: InputMaybe<CustomerCreateOrUpdateInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  invoiceDate?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  total?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Invoices. */
export type InvoiceInsertInput = {
  billingAddress?: InputMaybe<Scalars['String']['input']>;
  billingCity?: InputMaybe<Scalars['String']['input']>;
  billingCountry?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode?: InputMaybe<Scalars['String']['input']>;
  billingState?: InputMaybe<Scalars['String']['input']>;
  customer?: InputMaybe<CustomerCreateOrUpdateInput>;
  invoiceDate: Scalars['ISOString']['input'];
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  total: Scalars['String']['input'];
};

export type InvoiceLine = {
  __typename?: 'InvoiceLine';
  id: Scalars['ID']['output'];
  invoice: Invoice;
  quantity: Scalars['Float']['output'];
  track: Track;
  unitPrice: Scalars['String']['output'];
};


export type InvoiceLineInvoiceArgs = {
  filter?: InputMaybe<InvoicesListFilter>;
};


export type InvoiceLineTrackArgs = {
  filter?: InputMaybe<TracksListFilter>;
};

/** Data needed to create or update InvoiceLines. If an ID is passed, this is an update, otherwise it's an insert. */
export type InvoiceLineCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  invoice?: InputMaybe<InvoiceCreateOrUpdateInput>;
  quantity?: InputMaybe<Scalars['Float']['input']>;
  track?: InputMaybe<TrackCreateOrUpdateInput>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create InvoiceLines. */
export type InvoiceLineInsertInput = {
  invoice?: InputMaybe<InvoiceCreateOrUpdateInput>;
  quantity: Scalars['Float']['input'];
  track?: InputMaybe<TrackCreateOrUpdateInput>;
  unitPrice: Scalars['String']['input'];
};

/** Data needed to update InvoiceLines. An ID must be passed. */
export type InvoiceLineUpdateInput = {
  id: Scalars['ID']['input'];
  invoice?: InputMaybe<InvoiceCreateOrUpdateInput>;
  quantity?: InputMaybe<Scalars['Float']['input']>;
  track?: InputMaybe<TrackCreateOrUpdateInput>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

export type InvoiceLinesListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoice?: InputMaybe<InvoicesListFilter>;
  quantity?: InputMaybe<Scalars['Float']['input']>;
  quantity_in?: InputMaybe<Array<Scalars['Float']['input']>>;
  quantity_ne?: InputMaybe<Scalars['Float']['input']>;
  quantity_nin?: InputMaybe<Array<Scalars['Float']['input']>>;
  quantity_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  quantity_null?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<TracksListFilter>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
  unitPrice_ilike?: InputMaybe<Scalars['String']['input']>;
  unitPrice_in?: InputMaybe<Array<Scalars['String']['input']>>;
  unitPrice_like?: InputMaybe<Scalars['String']['input']>;
  unitPrice_ne?: InputMaybe<Scalars['String']['input']>;
  unitPrice_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  unitPrice_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  unitPrice_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InvoiceLinesOrderByInput = {
  id?: InputMaybe<Sort>;
  quantity?: InputMaybe<Sort>;
  unitPrice?: InputMaybe<Sort>;
};

/** Pagination options for InvoiceLines. */
export type InvoiceLinesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<InvoiceLinesOrderByInput>;
};

/** Data needed to update Invoices. An ID must be passed. */
export type InvoiceUpdateInput = {
  billingAddress?: InputMaybe<Scalars['String']['input']>;
  billingCity?: InputMaybe<Scalars['String']['input']>;
  billingCountry?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode?: InputMaybe<Scalars['String']['input']>;
  billingState?: InputMaybe<Scalars['String']['input']>;
  customer?: InputMaybe<CustomerCreateOrUpdateInput>;
  id: Scalars['ID']['input'];
  invoiceDate?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  total?: InputMaybe<Scalars['String']['input']>;
};

export type InvoicesListFilter = {
  billingAddress?: InputMaybe<Scalars['String']['input']>;
  billingAddress_ilike?: InputMaybe<Scalars['String']['input']>;
  billingAddress_in?: InputMaybe<Array<Scalars['String']['input']>>;
  billingAddress_like?: InputMaybe<Scalars['String']['input']>;
  billingAddress_ne?: InputMaybe<Scalars['String']['input']>;
  billingAddress_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  billingAddress_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  billingAddress_null?: InputMaybe<Scalars['Boolean']['input']>;
  billingCity?: InputMaybe<Scalars['String']['input']>;
  billingCity_ilike?: InputMaybe<Scalars['String']['input']>;
  billingCity_in?: InputMaybe<Array<Scalars['String']['input']>>;
  billingCity_like?: InputMaybe<Scalars['String']['input']>;
  billingCity_ne?: InputMaybe<Scalars['String']['input']>;
  billingCity_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  billingCity_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  billingCity_null?: InputMaybe<Scalars['Boolean']['input']>;
  billingCountry?: InputMaybe<Scalars['String']['input']>;
  billingCountry_ilike?: InputMaybe<Scalars['String']['input']>;
  billingCountry_in?: InputMaybe<Array<Scalars['String']['input']>>;
  billingCountry_like?: InputMaybe<Scalars['String']['input']>;
  billingCountry_ne?: InputMaybe<Scalars['String']['input']>;
  billingCountry_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  billingCountry_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  billingCountry_null?: InputMaybe<Scalars['Boolean']['input']>;
  billingPostalCode?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode_ilike?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode_in?: InputMaybe<Array<Scalars['String']['input']>>;
  billingPostalCode_like?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode_ne?: InputMaybe<Scalars['String']['input']>;
  billingPostalCode_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  billingPostalCode_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  billingPostalCode_null?: InputMaybe<Scalars['Boolean']['input']>;
  billingState?: InputMaybe<Scalars['String']['input']>;
  billingState_ilike?: InputMaybe<Scalars['String']['input']>;
  billingState_in?: InputMaybe<Array<Scalars['String']['input']>>;
  billingState_like?: InputMaybe<Scalars['String']['input']>;
  billingState_ne?: InputMaybe<Scalars['String']['input']>;
  billingState_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  billingState_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  billingState_null?: InputMaybe<Scalars['Boolean']['input']>;
  customer?: InputMaybe<CustomersListFilter>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceDate?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_gt?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_gte?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_in?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  invoiceDate_lt?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_lte?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_ne?: InputMaybe<Scalars['ISOString']['input']>;
  invoiceDate_nin?: InputMaybe<Array<Scalars['ISOString']['input']>>;
  invoiceDate_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceDate_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceLines?: InputMaybe<InvoiceLinesListFilter>;
  total?: InputMaybe<Scalars['String']['input']>;
  total_ilike?: InputMaybe<Scalars['String']['input']>;
  total_in?: InputMaybe<Array<Scalars['String']['input']>>;
  total_like?: InputMaybe<Scalars['String']['input']>;
  total_ne?: InputMaybe<Scalars['String']['input']>;
  total_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  total_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  total_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InvoicesOrderByInput = {
  billingAddress?: InputMaybe<Sort>;
  billingCity?: InputMaybe<Sort>;
  billingCountry?: InputMaybe<Sort>;
  billingPostalCode?: InputMaybe<Sort>;
  billingState?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  invoiceDate?: InputMaybe<Sort>;
  total?: InputMaybe<Sort>;
};

/** Pagination options for Invoices. */
export type InvoicesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<InvoicesOrderByInput>;
};

export type MediaType = {
  __typename?: 'MediaType';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};


export type MediaTypeTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
};

/** Data needed to create or update MediaTypes. If an ID is passed, this is an update, otherwise it's an insert. */
export type MediaTypeCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to create MediaTypes. */
export type MediaTypeInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to update MediaTypes. An ID must be passed. */
export type MediaTypeUpdateInput = {
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

export type MediaTypesListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type MediaTypesOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for MediaTypes. */
export type MediaTypesPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<MediaTypesOrderByInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a single Album. */
  createAlbum?: Maybe<Album>;
  /** Create many Albums. */
  createAlbums?: Maybe<Array<Maybe<Album>>>;
  /** Create a single Artist. */
  createArtist?: Maybe<Artist>;
  /** Create many Artists. */
  createArtists?: Maybe<Array<Maybe<Artist>>>;
  /** Create a single Customer. */
  createCustomer?: Maybe<Customer>;
  /** Create many Customers. */
  createCustomers?: Maybe<Array<Maybe<Customer>>>;
  /** Create a single Employee. */
  createEmployee?: Maybe<Employee>;
  /** Create many Employees. */
  createEmployees?: Maybe<Array<Maybe<Employee>>>;
  /** Create a single Genre. */
  createGenre?: Maybe<Genre>;
  /** Create many Genres. */
  createGenres?: Maybe<Array<Maybe<Genre>>>;
  /** Create a single Invoice. */
  createInvoice?: Maybe<Invoice>;
  /** Create a single InvoiceLine. */
  createInvoiceLine?: Maybe<InvoiceLine>;
  /** Create many InvoiceLines. */
  createInvoiceLines?: Maybe<Array<Maybe<InvoiceLine>>>;
  /** Create many Invoices. */
  createInvoices?: Maybe<Array<Maybe<Invoice>>>;
  /** Create a single MediaType. */
  createMediaType?: Maybe<MediaType>;
  /** Create many MediaTypes. */
  createMediaTypes?: Maybe<Array<Maybe<MediaType>>>;
  /** Create or update many Albums. */
  createOrUpdateAlbums?: Maybe<Array<Maybe<Album>>>;
  /** Create or update many Artists. */
  createOrUpdateArtists?: Maybe<Array<Maybe<Artist>>>;
  /** Create or update many Customers. */
  createOrUpdateCustomers?: Maybe<Array<Maybe<Customer>>>;
  /** Create or update many Employees. */
  createOrUpdateEmployees?: Maybe<Array<Maybe<Employee>>>;
  /** Create or update many Genres. */
  createOrUpdateGenres?: Maybe<Array<Maybe<Genre>>>;
  /** Create or update many InvoiceLines. */
  createOrUpdateInvoiceLines?: Maybe<Array<Maybe<InvoiceLine>>>;
  /** Create or update many Invoices. */
  createOrUpdateInvoices?: Maybe<Array<Maybe<Invoice>>>;
  /** Create or update many MediaTypes. */
  createOrUpdateMediaTypes?: Maybe<Array<Maybe<MediaType>>>;
  /** Create or update many Playlists. */
  createOrUpdatePlaylists?: Maybe<Array<Maybe<Playlist>>>;
  /** Create or update many Tracks. */
  createOrUpdateTracks?: Maybe<Array<Maybe<Track>>>;
  /** Create a single Playlist. */
  createPlaylist?: Maybe<Playlist>;
  /** Create many Playlists. */
  createPlaylists?: Maybe<Array<Maybe<Playlist>>>;
  /** Create a single Track. */
  createTrack?: Maybe<Track>;
  /** Create many Tracks. */
  createTracks?: Maybe<Array<Maybe<Track>>>;
  /** Delete a single Album. */
  deleteAlbum?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Albums with a filter. */
  deleteAlbums?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Artist. */
  deleteArtist?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Artists with a filter. */
  deleteArtists?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Customer. */
  deleteCustomer?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Customers with a filter. */
  deleteCustomers?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Employee. */
  deleteEmployee?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Employees with a filter. */
  deleteEmployees?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Genre. */
  deleteGenre?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Genres with a filter. */
  deleteGenres?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Invoice. */
  deleteInvoice?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single InvoiceLine. */
  deleteInvoiceLine?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many InvoiceLines with a filter. */
  deleteInvoiceLines?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Invoices with a filter. */
  deleteInvoices?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single MediaType. */
  deleteMediaType?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many MediaTypes with a filter. */
  deleteMediaTypes?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Playlist. */
  deletePlaylist?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Playlists with a filter. */
  deletePlaylists?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Track. */
  deleteTrack?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Tracks with a filter. */
  deleteTracks?: Maybe<Scalars['Boolean']['output']>;
  /** Update a single Album. */
  updateAlbum?: Maybe<Album>;
  /** Update many Albums. */
  updateAlbums?: Maybe<Array<Maybe<Album>>>;
  /** Update a single Artist. */
  updateArtist?: Maybe<Artist>;
  /** Update many Artists. */
  updateArtists?: Maybe<Array<Maybe<Artist>>>;
  /** Update a single Customer. */
  updateCustomer?: Maybe<Customer>;
  /** Update many Customers. */
  updateCustomers?: Maybe<Array<Maybe<Customer>>>;
  /** Update a single Employee. */
  updateEmployee?: Maybe<Employee>;
  /** Update many Employees. */
  updateEmployees?: Maybe<Array<Maybe<Employee>>>;
  /** Update a single Genre. */
  updateGenre?: Maybe<Genre>;
  /** Update many Genres. */
  updateGenres?: Maybe<Array<Maybe<Genre>>>;
  /** Update a single Invoice. */
  updateInvoice?: Maybe<Invoice>;
  /** Update a single InvoiceLine. */
  updateInvoiceLine?: Maybe<InvoiceLine>;
  /** Update many InvoiceLines. */
  updateInvoiceLines?: Maybe<Array<Maybe<InvoiceLine>>>;
  /** Update many Invoices. */
  updateInvoices?: Maybe<Array<Maybe<Invoice>>>;
  /** Update a single MediaType. */
  updateMediaType?: Maybe<MediaType>;
  /** Update many MediaTypes. */
  updateMediaTypes?: Maybe<Array<Maybe<MediaType>>>;
  /** Update a single Playlist. */
  updatePlaylist?: Maybe<Playlist>;
  /** Update many Playlists. */
  updatePlaylists?: Maybe<Array<Maybe<Playlist>>>;
  /** Update a single Track. */
  updateTrack?: Maybe<Track>;
  /** Update many Tracks. */
  updateTracks?: Maybe<Array<Maybe<Track>>>;
};


export type MutationCreateAlbumArgs = {
  input: AlbumInsertInput;
};


export type MutationCreateAlbumsArgs = {
  input: Array<AlbumInsertInput>;
};


export type MutationCreateArtistArgs = {
  input: ArtistInsertInput;
};


export type MutationCreateArtistsArgs = {
  input: Array<ArtistInsertInput>;
};


export type MutationCreateCustomerArgs = {
  input: CustomerInsertInput;
};


export type MutationCreateCustomersArgs = {
  input: Array<CustomerInsertInput>;
};


export type MutationCreateEmployeeArgs = {
  input: EmployeeInsertInput;
};


export type MutationCreateEmployeesArgs = {
  input: Array<EmployeeInsertInput>;
};


export type MutationCreateGenreArgs = {
  input: GenreInsertInput;
};


export type MutationCreateGenresArgs = {
  input: Array<GenreInsertInput>;
};


export type MutationCreateInvoiceArgs = {
  input: InvoiceInsertInput;
};


export type MutationCreateInvoiceLineArgs = {
  input: InvoiceLineInsertInput;
};


export type MutationCreateInvoiceLinesArgs = {
  input: Array<InvoiceLineInsertInput>;
};


export type MutationCreateInvoicesArgs = {
  input: Array<InvoiceInsertInput>;
};


export type MutationCreateMediaTypeArgs = {
  input: MediaTypeInsertInput;
};


export type MutationCreateMediaTypesArgs = {
  input: Array<MediaTypeInsertInput>;
};


export type MutationCreateOrUpdateAlbumsArgs = {
  input: Array<AlbumCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateArtistsArgs = {
  input: Array<ArtistCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateCustomersArgs = {
  input: Array<CustomerCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateEmployeesArgs = {
  input: Array<EmployeeCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateGenresArgs = {
  input: Array<GenreCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateInvoiceLinesArgs = {
  input: Array<InvoiceLineCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateInvoicesArgs = {
  input: Array<InvoiceCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateMediaTypesArgs = {
  input: Array<MediaTypeCreateOrUpdateInput>;
};


export type MutationCreateOrUpdatePlaylistsArgs = {
  input: Array<PlaylistCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateTracksArgs = {
  input: Array<TrackCreateOrUpdateInput>;
};


export type MutationCreatePlaylistArgs = {
  input: PlaylistInsertInput;
};


export type MutationCreatePlaylistsArgs = {
  input: Array<PlaylistInsertInput>;
};


export type MutationCreateTrackArgs = {
  input: TrackInsertInput;
};


export type MutationCreateTracksArgs = {
  input: Array<TrackInsertInput>;
};


export type MutationDeleteAlbumArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteAlbumsArgs = {
  filter: AlbumsListFilter;
};


export type MutationDeleteArtistArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteArtistsArgs = {
  filter: ArtistsListFilter;
};


export type MutationDeleteCustomerArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteCustomersArgs = {
  filter: CustomersListFilter;
};


export type MutationDeleteEmployeeArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteEmployeesArgs = {
  filter: EmployeesListFilter;
};


export type MutationDeleteGenreArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteGenresArgs = {
  filter: GenresListFilter;
};


export type MutationDeleteInvoiceArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteInvoiceLineArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteInvoiceLinesArgs = {
  filter: InvoiceLinesListFilter;
};


export type MutationDeleteInvoicesArgs = {
  filter: InvoicesListFilter;
};


export type MutationDeleteMediaTypeArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteMediaTypesArgs = {
  filter: MediaTypesListFilter;
};


export type MutationDeletePlaylistArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeletePlaylistsArgs = {
  filter: PlaylistsListFilter;
};


export type MutationDeleteTrackArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteTracksArgs = {
  filter: TracksListFilter;
};


export type MutationUpdateAlbumArgs = {
  input: AlbumUpdateInput;
};


export type MutationUpdateAlbumsArgs = {
  input: Array<AlbumUpdateInput>;
};


export type MutationUpdateArtistArgs = {
  input: ArtistUpdateInput;
};


export type MutationUpdateArtistsArgs = {
  input: Array<ArtistUpdateInput>;
};


export type MutationUpdateCustomerArgs = {
  input: CustomerUpdateInput;
};


export type MutationUpdateCustomersArgs = {
  input: Array<CustomerUpdateInput>;
};


export type MutationUpdateEmployeeArgs = {
  input: EmployeeUpdateInput;
};


export type MutationUpdateEmployeesArgs = {
  input: Array<EmployeeUpdateInput>;
};


export type MutationUpdateGenreArgs = {
  input: GenreUpdateInput;
};


export type MutationUpdateGenresArgs = {
  input: Array<GenreUpdateInput>;
};


export type MutationUpdateInvoiceArgs = {
  input: InvoiceUpdateInput;
};


export type MutationUpdateInvoiceLineArgs = {
  input: InvoiceLineUpdateInput;
};


export type MutationUpdateInvoiceLinesArgs = {
  input: Array<InvoiceLineUpdateInput>;
};


export type MutationUpdateInvoicesArgs = {
  input: Array<InvoiceUpdateInput>;
};


export type MutationUpdateMediaTypeArgs = {
  input: MediaTypeUpdateInput;
};


export type MutationUpdateMediaTypesArgs = {
  input: Array<MediaTypeUpdateInput>;
};


export type MutationUpdatePlaylistArgs = {
  input: PlaylistUpdateInput;
};


export type MutationUpdatePlaylistsArgs = {
  input: Array<PlaylistUpdateInput>;
};


export type MutationUpdateTrackArgs = {
  input: TrackUpdateInput;
};


export type MutationUpdateTracksArgs = {
  input: Array<TrackUpdateInput>;
};

export type Playlist = {
  __typename?: 'Playlist';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  tracks: Array<Track>;
};


export type PlaylistTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
};

/** Data needed to create or update Playlists. If an ID is passed, this is an update, otherwise it's an insert. */
export type PlaylistCreateOrUpdateInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to create Playlists. */
export type PlaylistInsertInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

/** Data needed to update Playlists. An ID must be passed. */
export type PlaylistUpdateInput = {
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<Array<TrackCreateOrUpdateInput>>;
};

export type PlaylistsListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<TracksListFilter>;
};

export type PlaylistsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Playlists. */
export type PlaylistsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlaylistsOrderByInput>;
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  /** Get a single Album. */
  album?: Maybe<Album>;
  /** Get multiple Albums. */
  albums?: Maybe<Array<Maybe<Album>>>;
  /** Get a single Artist. */
  artist?: Maybe<Artist>;
  /** Get multiple Artists. */
  artists?: Maybe<Array<Maybe<Artist>>>;
  /** Get a single Customer. */
  customer?: Maybe<Customer>;
  /** Get multiple Customers. */
  customers?: Maybe<Array<Maybe<Customer>>>;
  /** Get a single Employee. */
  employee?: Maybe<Employee>;
  /** Get multiple Employees. */
  employees?: Maybe<Array<Maybe<Employee>>>;
  /** Get a single Genre. */
  genre?: Maybe<Genre>;
  /** Get multiple Genres. */
  genres?: Maybe<Array<Maybe<Genre>>>;
  /** Get a single Invoice. */
  invoice?: Maybe<Invoice>;
  /** Get a single InvoiceLine. */
  invoiceLine?: Maybe<InvoiceLine>;
  /** Get multiple InvoiceLines. */
  invoiceLines?: Maybe<Array<Maybe<InvoiceLine>>>;
  /** Get multiple Invoices. */
  invoices?: Maybe<Array<Maybe<Invoice>>>;
  /** Get a single MediaType. */
  mediaType?: Maybe<MediaType>;
  /** Get multiple MediaTypes. */
  mediaTypes?: Maybe<Array<Maybe<MediaType>>>;
  /** Get a single Playlist. */
  playlist?: Maybe<Playlist>;
  /** Get multiple Playlists. */
  playlists?: Maybe<Array<Maybe<Playlist>>>;
  /** Get a single Track. */
  track?: Maybe<Track>;
  /** Get multiple Tracks. */
  tracks?: Maybe<Array<Maybe<Track>>>;
};


export type QueryAlbumArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAlbumsArgs = {
  filter?: InputMaybe<AlbumsListFilter>;
  pagination?: InputMaybe<AlbumsPaginationInput>;
};


export type QueryArtistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryArtistsArgs = {
  filter?: InputMaybe<ArtistsListFilter>;
  pagination?: InputMaybe<ArtistsPaginationInput>;
};


export type QueryCustomerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCustomersArgs = {
  filter?: InputMaybe<CustomersListFilter>;
  pagination?: InputMaybe<CustomersPaginationInput>;
};


export type QueryEmployeeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEmployeesArgs = {
  filter?: InputMaybe<EmployeesListFilter>;
  pagination?: InputMaybe<EmployeesPaginationInput>;
};


export type QueryGenreArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGenresArgs = {
  filter?: InputMaybe<GenresListFilter>;
  pagination?: InputMaybe<GenresPaginationInput>;
};


export type QueryInvoiceArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInvoiceLineArgs = {
  id: Scalars['ID']['input'];
};


export type QueryInvoiceLinesArgs = {
  filter?: InputMaybe<InvoiceLinesListFilter>;
  pagination?: InputMaybe<InvoiceLinesPaginationInput>;
};


export type QueryInvoicesArgs = {
  filter?: InputMaybe<InvoicesListFilter>;
  pagination?: InputMaybe<InvoicesPaginationInput>;
};


export type QueryMediaTypeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMediaTypesArgs = {
  filter?: InputMaybe<MediaTypesListFilter>;
  pagination?: InputMaybe<MediaTypesPaginationInput>;
};


export type QueryPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPlaylistsArgs = {
  filter?: InputMaybe<PlaylistsListFilter>;
  pagination?: InputMaybe<PlaylistsPaginationInput>;
};


export type QueryTrackArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTracksArgs = {
  filter?: InputMaybe<TracksListFilter>;
  pagination?: InputMaybe<TracksPaginationInput>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Track = {
  __typename?: 'Track';
  album?: Maybe<Album>;
  bytes?: Maybe<Scalars['Float']['output']>;
  composer?: Maybe<Scalars['String']['output']>;
  genre?: Maybe<Genre>;
  id: Scalars['ID']['output'];
  invoiceLines: Array<InvoiceLine>;
  mediaType: MediaType;
  milliseconds: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  playlists: Array<Playlist>;
  unitPrice: Scalars['String']['output'];
};


export type TrackAlbumArgs = {
  filter?: InputMaybe<AlbumsListFilter>;
};


export type TrackGenreArgs = {
  filter?: InputMaybe<GenresListFilter>;
};


export type TrackInvoiceLinesArgs = {
  filter?: InputMaybe<InvoiceLinesListFilter>;
};


export type TrackMediaTypeArgs = {
  filter?: InputMaybe<MediaTypesListFilter>;
};


export type TrackPlaylistsArgs = {
  filter?: InputMaybe<PlaylistsListFilter>;
};

/** Data needed to create or update Tracks. If an ID is passed, this is an update, otherwise it's an insert. */
export type TrackCreateOrUpdateInput = {
  album?: InputMaybe<AlbumCreateOrUpdateInput>;
  bytes?: InputMaybe<Scalars['Float']['input']>;
  composer?: InputMaybe<Scalars['String']['input']>;
  genre?: InputMaybe<GenreCreateOrUpdateInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  mediaType?: InputMaybe<MediaTypeCreateOrUpdateInput>;
  milliseconds?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  playlists?: InputMaybe<Array<PlaylistCreateOrUpdateInput>>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Tracks. */
export type TrackInsertInput = {
  album?: InputMaybe<AlbumCreateOrUpdateInput>;
  bytes?: InputMaybe<Scalars['Float']['input']>;
  composer?: InputMaybe<Scalars['String']['input']>;
  genre?: InputMaybe<GenreCreateOrUpdateInput>;
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  mediaType?: InputMaybe<MediaTypeCreateOrUpdateInput>;
  milliseconds: Scalars['Float']['input'];
  name: Scalars['String']['input'];
  playlists?: InputMaybe<Array<PlaylistCreateOrUpdateInput>>;
  unitPrice: Scalars['String']['input'];
};

/** Data needed to update Tracks. An ID must be passed. */
export type TrackUpdateInput = {
  album?: InputMaybe<AlbumCreateOrUpdateInput>;
  bytes?: InputMaybe<Scalars['Float']['input']>;
  composer?: InputMaybe<Scalars['String']['input']>;
  genre?: InputMaybe<GenreCreateOrUpdateInput>;
  id: Scalars['ID']['input'];
  invoiceLines?: InputMaybe<Array<InvoiceLineCreateOrUpdateInput>>;
  mediaType?: InputMaybe<MediaTypeCreateOrUpdateInput>;
  milliseconds?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  playlists?: InputMaybe<Array<PlaylistCreateOrUpdateInput>>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
};

export type TracksListFilter = {
  album?: InputMaybe<AlbumsListFilter>;
  bytes?: InputMaybe<Scalars['Float']['input']>;
  bytes_in?: InputMaybe<Array<Scalars['Float']['input']>>;
  bytes_ne?: InputMaybe<Scalars['Float']['input']>;
  bytes_nin?: InputMaybe<Array<Scalars['Float']['input']>>;
  bytes_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  bytes_null?: InputMaybe<Scalars['Boolean']['input']>;
  composer?: InputMaybe<Scalars['String']['input']>;
  composer_ilike?: InputMaybe<Scalars['String']['input']>;
  composer_in?: InputMaybe<Array<Scalars['String']['input']>>;
  composer_like?: InputMaybe<Scalars['String']['input']>;
  composer_ne?: InputMaybe<Scalars['String']['input']>;
  composer_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  composer_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  composer_null?: InputMaybe<Scalars['Boolean']['input']>;
  genre?: InputMaybe<GenresListFilter>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  invoiceLines?: InputMaybe<InvoiceLinesListFilter>;
  mediaType?: InputMaybe<MediaTypesListFilter>;
  milliseconds?: InputMaybe<Scalars['Float']['input']>;
  milliseconds_in?: InputMaybe<Array<Scalars['Float']['input']>>;
  milliseconds_ne?: InputMaybe<Scalars['Float']['input']>;
  milliseconds_nin?: InputMaybe<Array<Scalars['Float']['input']>>;
  milliseconds_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  milliseconds_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
  playlists?: InputMaybe<PlaylistsListFilter>;
  unitPrice?: InputMaybe<Scalars['String']['input']>;
  unitPrice_ilike?: InputMaybe<Scalars['String']['input']>;
  unitPrice_in?: InputMaybe<Array<Scalars['String']['input']>>;
  unitPrice_like?: InputMaybe<Scalars['String']['input']>;
  unitPrice_ne?: InputMaybe<Scalars['String']['input']>;
  unitPrice_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  unitPrice_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  unitPrice_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TracksOrderByInput = {
  bytes?: InputMaybe<Sort>;
  composer?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  milliseconds?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  unitPrice?: InputMaybe<Sort>;
};

/** Pagination options for Tracks. */
export type TracksPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TracksOrderByInput>;
};
